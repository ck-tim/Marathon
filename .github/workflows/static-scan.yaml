name: Static Scans

on:
  #push: # not on push for the training (just manual)
  workflow_dispatch: # to allow running manually

# wichtig! check das mal
permissions:
  contents: read


jobs:

  sast-scans:
    name: SAST Scans
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          # auch wichtig, auch checken
          persist-credentials: false

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'

      # auch spannend... funktioniert das bei uns?
      - name: Setup Maven Dependency Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install

      # ======================================================

      # geht auch mit Sonatype Lifecycle! Siehe Claude
      - name: Generate CycloneDX SBOM
        run: mvn org.cyclonedx:cyclonedx-maven-plugin:2.7.9:makeAggregateBom # outputs to target/bom.json and/or bom.xml

      # attaches artifact to output of build
      # Sonatype SBOM Manager! http://help.sonatype.com/en/sonatype-sbom-manager.html
      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx.json
          path: target/bom.json

      # ======================================================

      - name: Grype Dependency Scanner (Report)
        id: scan
        # wichtig! use full commit hash instead of versions! (fÃ¼r alle 3rd party actions)
        uses: anchore/scan-action@be7a22da4f22dde446c4c4c099887ff5b256526c
        with:
          path: "."
          fail-build: false # to always generate the report, then again a scan that might fail

      # Static Analysis Results Interchange Format
      - name: Upload Grype SARIF Results
        uses: actions/upload-artifact@v4
        with: # Yep, you can open this file in your IDE: Just drag and drop it into IntelliJ IDEA or Visual Studio Code
          name: grype-scan-results.sarif
          # GHA templating
          path: ${{ steps.scan.outputs.sarif }}

      # ======================================================

      # viel manuell, weil fixe version
      - name: Download SpotBugs CLI + FindSecBugs Rule Pack
        run: |
          wget -O spotbugs.tgz https://github.com/spotbugs/spotbugs/releases/download/4.9.3/spotbugs-4.9.3.tgz
          tar -xzf spotbugs.tgz
          mv spotbugs-*/ spotbugs/

          wget -O findsecbugs.jar https://search.maven.org/remotecontent?filepath=com/h3xstream/findsecbugs/findsecbugs-plugin/1.12.0/findsecbugs-plugin-1.12.0.jar
          mv findsecbugs.jar spotbugs/plugin/.

      - name: Run SpotBugs CLI (SARIF)
        run: |
          spotbugs/bin/spotbugs -sarif:/tmp/raw-spotbugs-output.txt -effort:max -low -auxclasspath lib:target/classes target/classes > /tmp/raw-spotbugs-output.txt
          grep -A100000 '{"version"' /tmp/raw-spotbugs-output.txt > /tmp/spotbugs-results.sarif

      - name: Upload SpotBugs SARIF Results
        uses: actions/upload-artifact@v4
        with: # Yep, you can open this file in your IDE: Just drag and drop it into IntelliJ IDEA or Visual Studio Code
          name: spotbugs-scan-results.sarif
          path: /tmp/spotbugs-results.sarif